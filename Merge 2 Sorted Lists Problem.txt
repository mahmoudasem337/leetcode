/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    
        ListNode* l3;
    if(!l1) return l2;
    if(!l2) return l1;
//determine start of new list
if(l1->val > l2->val){
    //note: if the condition is : if(l1>l2) its wrong in testcases. 
l3=l2;
l2=l2->next;
}
else{
l3=l1;
l1=l1->next;
}
//take copy from l3
ListNode* cur = l3;
//complete the l3
 while(l1 && l2){
            if(l1->val < l2->val){
                cur->next = l1;
                l1 = l1->next;
            } else {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        //if l1 or l2 ended , we complete l3 with the remaining list
        if(!l1) cur->next = l2;
        else cur->next = l1;
    return l3;
    }
};